
1-wire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001f88  08001f88  00011f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ff8  08001ff8  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08001ff8  08001ff8  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ff8  08001ff8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ff8  08001ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ffc  08001ffc  00011ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000034  08002034  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002034  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006004  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001574  00000000  00000000  00026061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  000275d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  00027c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016db5  00000000  00000000  00028290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007455  00000000  00000000  0003f045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008217e  00000000  00000000  0004649a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000195c  00000000  00000000  000c8668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f70 	.word	0x08001f70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08001f70 	.word	0x08001f70

0800014c <ExecuteCommand>:
static DS24B33_Command copyScratch = {.code = 0x55, .rxBytesNum = 0, .txBytesNum = 3};
static DS24B33_Command readMemory = {.code = 0xF0, .txBytesNum = 2};
static DS24B33_Command readRom = {.code = 0x33, .rxBytesNum = 8, .txBytesNum = 0};

static void ExecuteCommand(UART_HandleTypeDef *huart, DS24B33_Command command, uint8_t *data)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	1d38      	adds	r0, r7, #4
 8000156:	e880 0006 	stmia.w	r0, {r1, r2}
 800015a:	603b      	str	r3, [r7, #0]
	OneWire_ProcessByte(huart, command.code);
 800015c:	793b      	ldrb	r3, [r7, #4]
 800015e:	4619      	mov	r1, r3
 8000160:	68f8      	ldr	r0, [r7, #12]
 8000162:	f000 fc1e 	bl	80009a2 <OneWire_ProcessByte>

	for (uint8_t i = 0; i < command.txBytesNum; i++)
 8000166:	2300      	movs	r3, #0
 8000168:	75fb      	strb	r3, [r7, #23]
 800016a:	e00a      	b.n	8000182 <ExecuteCommand+0x36>
	{
		OneWire_ProcessByte(huart, data[i]);
 800016c:	7dfb      	ldrb	r3, [r7, #23]
 800016e:	683a      	ldr	r2, [r7, #0]
 8000170:	4413      	add	r3, r2
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	4619      	mov	r1, r3
 8000176:	68f8      	ldr	r0, [r7, #12]
 8000178:	f000 fc13 	bl	80009a2 <OneWire_ProcessByte>
	for (uint8_t i = 0; i < command.txBytesNum; i++)
 800017c:	7dfb      	ldrb	r3, [r7, #23]
 800017e:	3301      	adds	r3, #1
 8000180:	75fb      	strb	r3, [r7, #23]
 8000182:	7dfb      	ldrb	r3, [r7, #23]
 8000184:	b29a      	uxth	r2, r3
 8000186:	893b      	ldrh	r3, [r7, #8]
 8000188:	429a      	cmp	r2, r3
 800018a:	d3ef      	bcc.n	800016c <ExecuteCommand+0x20>
	}

	for (uint8_t i = 0; i < command.rxBytesNum; i++)
 800018c:	2300      	movs	r3, #0
 800018e:	75bb      	strb	r3, [r7, #22]
 8000190:	e00b      	b.n	80001aa <ExecuteCommand+0x5e>
	{
		data[i] = OneWire_ProcessByte(huart, 0xFF);
 8000192:	7dbb      	ldrb	r3, [r7, #22]
 8000194:	683a      	ldr	r2, [r7, #0]
 8000196:	18d4      	adds	r4, r2, r3
 8000198:	21ff      	movs	r1, #255	; 0xff
 800019a:	68f8      	ldr	r0, [r7, #12]
 800019c:	f000 fc01 	bl	80009a2 <OneWire_ProcessByte>
 80001a0:	4603      	mov	r3, r0
 80001a2:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < command.rxBytesNum; i++)
 80001a4:	7dbb      	ldrb	r3, [r7, #22]
 80001a6:	3301      	adds	r3, #1
 80001a8:	75bb      	strb	r3, [r7, #22]
 80001aa:	7dbb      	ldrb	r3, [r7, #22]
 80001ac:	b29a      	uxth	r2, r3
 80001ae:	88fb      	ldrh	r3, [r7, #6]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d3ee      	bcc.n	8000192 <ExecuteCommand+0x46>
	}


}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	371c      	adds	r7, #28
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd90      	pop	{r4, r7, pc}
	...

080001c0 <WriteScratchpad>:

void WriteScratchpad(UART_HandleTypeDef *huart, uint8_t *data, size_t size)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	60f8      	str	r0, [r7, #12]
 80001c8:	60b9      	str	r1, [r7, #8]
 80001ca:	607a      	str	r2, [r7, #4]
	writeScratch.txBytesNum = size;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <WriteScratchpad+0x30>)
 80001d2:	809a      	strh	r2, [r3, #4]
	ExecuteCommand(huart, writeScratch, data);
 80001d4:	4a06      	ldr	r2, [pc, #24]	; (80001f0 <WriteScratchpad+0x30>)
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	ca06      	ldmia	r2, {r1, r2}
 80001da:	68f8      	ldr	r0, [r7, #12]
 80001dc:	f7ff ffb6 	bl	800014c <ExecuteCommand>
	OneWire_Reset(huart);
 80001e0:	68f8      	ldr	r0, [r7, #12]
 80001e2:	f000 fb8f 	bl	8000904 <OneWire_Reset>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000000 	.word	0x20000000

080001f4 <ReadScratchpad>:

void ReadScratchpad(UART_HandleTypeDef *huart, uint8_t *data)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]
	ExecuteCommand(huart, readScratch, data);
 80001fe:	4a06      	ldr	r2, [pc, #24]	; (8000218 <ReadScratchpad+0x24>)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	ca06      	ldmia	r2, {r1, r2}
 8000204:	6878      	ldr	r0, [r7, #4]
 8000206:	f7ff ffa1 	bl	800014c <ExecuteCommand>
	OneWire_Reset(huart);
 800020a:	6878      	ldr	r0, [r7, #4]
 800020c:	f000 fb7a 	bl	8000904 <OneWire_Reset>
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	20000008 	.word	0x20000008

0800021c <CopyScratchpad>:

void CopyScratchpad(UART_HandleTypeDef *huart, uint8_t *data)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
	ExecuteCommand(huart, copyScratch, data);
 8000226:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <CopyScratchpad+0x3c>)
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	ca06      	ldmia	r2, {r1, r2}
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	f7ff ff8d 	bl	800014c <ExecuteCommand>

	uint32_t t = HAL_GetTick();
 8000232:	f000 fd37 	bl	8000ca4 <HAL_GetTick>
 8000236:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - t < 7) {}
 8000238:	bf00      	nop
 800023a:	f000 fd33 	bl	8000ca4 <HAL_GetTick>
 800023e:	4602      	mov	r2, r0
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	1ad3      	subs	r3, r2, r3
 8000244:	2b06      	cmp	r3, #6
 8000246:	d9f8      	bls.n	800023a <CopyScratchpad+0x1e>

	OneWire_Reset(huart);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f000 fb5b 	bl	8000904 <OneWire_Reset>
}
 800024e:	bf00      	nop
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000010 	.word	0x20000010

0800025c <ReadMemory>:

void ReadMemory(UART_HandleTypeDef *huart, uint8_t *data, size_t size)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
	readMemory.rxBytesNum = size;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	b29a      	uxth	r2, r3
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <ReadMemory+0x30>)
 800026e:	805a      	strh	r2, [r3, #2]
	ExecuteCommand(huart, readMemory, data);
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <ReadMemory+0x30>)
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	ca06      	ldmia	r2, {r1, r2}
 8000276:	68f8      	ldr	r0, [r7, #12]
 8000278:	f7ff ff68 	bl	800014c <ExecuteCommand>
	OneWire_Reset(huart);
 800027c:	68f8      	ldr	r0, [r7, #12]
 800027e:	f000 fb41 	bl	8000904 <OneWire_Reset>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000018 	.word	0x20000018

08000290 <ReadRom>:
void ReadRom(UART_HandleTypeDef *huart, uint8_t *data)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
	ExecuteCommand(huart, readRom, data);
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <ReadRom+0x20>)
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	ca06      	ldmia	r2, {r1, r2}
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ff53 	bl	800014c <ExecuteCommand>
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000020 	.word	0x20000020

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b0a4      	sub	sp, #144	; 0x90
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fc9b 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f853 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f8e7 	bl	8000494 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002c6:	f000 f891 	bl	80003ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80002ca:	f000 f8b9 	bl	8000440 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ONEWIRE_Status res = OneWire_Reset(&huart1);
 80002ce:	4822      	ldr	r0, [pc, #136]	; (8000358 <main+0xa4>)
 80002d0:	f000 fb18 	bl	8000904 <OneWire_Reset>
 80002d4:	4603      	mov	r3, r0
 80002d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (res == ONEWIRE_OK)
 80002da:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d133      	bne.n	800034a <main+0x96>
	  if (check_memory())
		  HAL_UART_Transmit(&huart2, (uint8_t*)"OK\n\r", 4, ONEWIRE_UART_TIMEOUT);
	  else
		  HAL_UART_Transmit(&huart2, (uint8_t*)"MEMORY ERROR\n\r", 14, ONEWIRE_UART_TIMEOUT);
		*/
	  const uint8_t userData[] = {
 80002e2:	4b1e      	ldr	r3, [pc, #120]	; (800035c <main+0xa8>)
 80002e4:	1d3c      	adds	r4, r7, #4
 80002e6:	461d      	mov	r5, r3
 80002e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  0x0B, 0x47, 0x4B, 0x47, 0x48, 0x00, 0xFF, 0xFF,
			  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			  0x80, 0x3D, 0x36, 0xC7, 0x00, 0x3F, 0x83, 0x40,
			  0x84, 0x81, 0x6F, 0xAC, 0x7F, 0xED, 0x11, 0x7E
	  };
	  uint16_t addr = 0x001E;
 80002fc:	231e      	movs	r3, #30
 80002fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	  size_t userData_size = sizeof(userData) / sizeof(userData[0]);
 8000302:	2340      	movs	r3, #64	; 0x40
 8000304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  bool test = write_Userdata(userData, userData_size, addr);
 8000308:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f98e 	bl	8000634 <write_Userdata>
 8000318:	4603      	mov	r3, r0
 800031a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	  uint8_t getUserData[64] = {0};
 800031e:	2300      	movs	r3, #0
 8000320:	647b      	str	r3, [r7, #68]	; 0x44
 8000322:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000326:	223c      	movs	r2, #60	; 0x3c
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fe18 	bl	8001f60 <memset>
	  read_mem_data(getUserData, userData_size, addr);
 8000330:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8000334:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000338:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fa0d 	bl	800075c <read_mem_data>

	  test++;
 8000342:	2301      	movs	r3, #1
 8000344:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000348:	e005      	b.n	8000356 <main+0xa2>
//	  uint16_t userData_size = sizeof(userData) / sizeof(userData[0]);
//
//	  write_Userdata(userData, userData_size, 0x0008);
  }
  else
	  HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR\n\r", 7, ONEWIRE_UART_TIMEOUT);
 800034a:	230a      	movs	r3, #10
 800034c:	2207      	movs	r2, #7
 800034e:	4904      	ldr	r1, [pc, #16]	; (8000360 <main+0xac>)
 8000350:	4804      	ldr	r0, [pc, #16]	; (8000364 <main+0xb0>)
 8000352:	f001 fbd5 	bl	8001b00 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000356:	e7fe      	b.n	8000356 <main+0xa2>
 8000358:	20000050 	.word	0x20000050
 800035c:	08001f90 	.word	0x08001f90
 8000360:	08001f88 	.word	0x08001f88
 8000364:	20000094 	.word	0x20000094

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f001 fdf2 	bl	8001f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038a:	2302      	movs	r3, #2
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	2301      	movs	r3, #1
 8000390:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000392:	2310      	movs	r3, #16
 8000394:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800039a:	2300      	movs	r3, #0
 800039c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800039e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 feed 	bl	8001188 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003b4:	f000 fa36 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2302      	movs	r3, #2
 80003be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2102      	movs	r1, #2
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 f95a 	bl	800168c <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003de:	f000 fa21 	bl	8000824 <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	; 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	; (800043c <MX_USART1_UART_Init+0x50>)
 80003f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 80003f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000424:	f001 fb17 	bl	8001a56 <HAL_HalfDuplex_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800042e:	f000 f9f9 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000050 	.word	0x20000050
 800043c:	40013800 	.word	0x40013800

08000440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART2_UART_Init+0x4c>)
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <MX_USART2_UART_Init+0x50>)
 8000448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <MX_USART2_UART_Init+0x4c>)
 800044c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART2_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART2_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART2_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART2_UART_Init+0x4c>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART2_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART2_UART_Init+0x4c>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_USART2_UART_Init+0x4c>)
 8000478:	f001 faa0 	bl	80019bc <HAL_UART_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000482:	f000 f9cf 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000094 	.word	0x20000094
 8000490:	40004400 	.word	0x40004400

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_GPIO_Init+0x70>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a19      	ldr	r2, [pc, #100]	; (8000504 <MX_GPIO_Init+0x70>)
 80004a0:	f043 0310 	orr.w	r3, r3, #16
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_GPIO_Init+0x70>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0310 	and.w	r3, r3, #16
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_GPIO_Init+0x70>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a13      	ldr	r2, [pc, #76]	; (8000504 <MX_GPIO_Init+0x70>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_GPIO_Init+0x70>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_GPIO_Init+0x70>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <MX_GPIO_Init+0x70>)
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_GPIO_Init+0x70>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0304 	and.w	r3, r3, #4
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_GPIO_Init+0x70>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <MX_GPIO_Init+0x70>)
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <MX_GPIO_Init+0x70>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0308 	and.w	r3, r3, #8
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000

08000508 <write_data_toMem>:

/* USER CODE BEGIN 4 */

static void write_data_toMem(uint8_t *data, size_t size, uint16_t addr)
{
 8000508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800050c:	b097      	sub	sp, #92	; 0x5c
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	4613      	mov	r3, r2
 8000516:	80fb      	strh	r3, [r7, #6]
 8000518:	466b      	mov	r3, sp
 800051a:	461e      	mov	r6, r3
	uint8_t TA1 = (addr & 0x00FF);
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t TA2 = ((addr & 0xFF00)>>8);
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	0a1b      	lsrs	r3, r3, #8
 8000526:	b29b      	uxth	r3, r3
 8000528:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	uint8_t dataRom[8];

	uint8_t writeScratch_data[size+2];
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c99      	adds	r1, r3, #2
 8000530:	460b      	mov	r3, r1
 8000532:	3b01      	subs	r3, #1
 8000534:	64bb      	str	r3, [r7, #72]	; 0x48
 8000536:	2300      	movs	r3, #0
 8000538:	4688      	mov	r8, r1
 800053a:	4699      	mov	r9, r3
 800053c:	f04f 0200 	mov.w	r2, #0
 8000540:	f04f 0300 	mov.w	r3, #0
 8000544:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000548:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800054c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000550:	2300      	movs	r3, #0
 8000552:	460c      	mov	r4, r1
 8000554:	461d      	mov	r5, r3
 8000556:	f04f 0200 	mov.w	r2, #0
 800055a:	f04f 0300 	mov.w	r3, #0
 800055e:	00eb      	lsls	r3, r5, #3
 8000560:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000564:	00e2      	lsls	r2, r4, #3
 8000566:	1dcb      	adds	r3, r1, #7
 8000568:	08db      	lsrs	r3, r3, #3
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	ebad 0d03 	sub.w	sp, sp, r3
 8000570:	466b      	mov	r3, sp
 8000572:	3300      	adds	r3, #0
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t readScratch_data[35];
	uint8_t copyScratch_data[3];

	writeScratch_data[0] = TA1;
 8000576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000578:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800057c:	701a      	strb	r2, [r3, #0]
	writeScratch_data[1] = TA2;
 800057e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000580:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000584:	705a      	strb	r2, [r3, #1]
	for (size_t i = 2; i < size+2; i++)
 8000586:	2302      	movs	r3, #2
 8000588:	653b      	str	r3, [r7, #80]	; 0x50
 800058a:	e00c      	b.n	80005a6 <write_data_toMem+0x9e>
		writeScratch_data[i] = data[i-2];
 800058c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800058e:	3b02      	subs	r3, #2
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	4413      	add	r3, r2
 8000594:	7819      	ldrb	r1, [r3, #0]
 8000596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800059a:	4413      	add	r3, r2
 800059c:	460a      	mov	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]
	for (size_t i = 2; i < size+2; i++)
 80005a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005a2:	3301      	adds	r3, #1
 80005a4:	653b      	str	r3, [r7, #80]	; 0x50
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	3302      	adds	r3, #2
 80005aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d3ed      	bcc.n	800058c <write_data_toMem+0x84>

	// сначала делаем ReadRom, а потом другие команды
	ReadRom(&huart1, dataRom);
 80005b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b4:	4619      	mov	r1, r3
 80005b6:	481e      	ldr	r0, [pc, #120]	; (8000630 <write_data_toMem+0x128>)
 80005b8:	f7ff fe6a 	bl	8000290 <ReadRom>
	WriteScratchpad(&huart1, writeScratch_data, size+2);
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	3302      	adds	r3, #2
 80005c0:	461a      	mov	r2, r3
 80005c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80005c4:	481a      	ldr	r0, [pc, #104]	; (8000630 <write_data_toMem+0x128>)
 80005c6:	f7ff fdfb 	bl	80001c0 <WriteScratchpad>

	ReadRom(&huart1, dataRom);
 80005ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ce:	4619      	mov	r1, r3
 80005d0:	4817      	ldr	r0, [pc, #92]	; (8000630 <write_data_toMem+0x128>)
 80005d2:	f7ff fe5d 	bl	8000290 <ReadRom>
	ReadScratchpad(&huart1, readScratch_data);
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	4619      	mov	r1, r3
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <write_data_toMem+0x128>)
 80005de:	f7ff fe09 	bl	80001f4 <ReadScratchpad>

	// запись целевого адреса в начало массивов
	for (int i = 0; i < 3; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	657b      	str	r3, [r7, #84]	; 0x54
 80005e6:	e00d      	b.n	8000604 <write_data_toMem+0xfc>
		copyScratch_data[i] = readScratch_data[i];
 80005e8:	f107 0218 	add.w	r2, r7, #24
 80005ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005ee:	4413      	add	r3, r2
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	f107 0214 	add.w	r2, r7, #20
 80005f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005f8:	4413      	add	r3, r2
 80005fa:	460a      	mov	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 80005fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000600:	3301      	adds	r3, #1
 8000602:	657b      	str	r3, [r7, #84]	; 0x54
 8000604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000606:	2b02      	cmp	r3, #2
 8000608:	ddee      	ble.n	80005e8 <write_data_toMem+0xe0>

	ReadRom(&huart1, dataRom);
 800060a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800060e:	4619      	mov	r1, r3
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <write_data_toMem+0x128>)
 8000612:	f7ff fe3d 	bl	8000290 <ReadRom>
	CopyScratchpad(&huart1, copyScratch_data);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <write_data_toMem+0x128>)
 800061e:	f7ff fdfd 	bl	800021c <CopyScratchpad>
 8000622:	46b5      	mov	sp, r6
}
 8000624:	bf00      	nop
 8000626:	375c      	adds	r7, #92	; 0x5c
 8000628:	46bd      	mov	sp, r7
 800062a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800062e:	bf00      	nop
 8000630:	20000050 	.word	0x20000050

08000634 <write_Userdata>:

static bool write_Userdata(const uint8_t *data, size_t size, uint16_t addr)
{
 8000634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000638:	b08b      	sub	sp, #44	; 0x2c
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	4613      	mov	r3, r2
 8000642:	80fb      	strh	r3, [r7, #6]
	if(addr + size - 1 > 0x1FF)
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	3b01      	subs	r3, #1
 800064c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000650:	d301      	bcc.n	8000656 <write_Userdata+0x22>
		return false;
 8000652:	2300      	movs	r3, #0
 8000654:	e07d      	b.n	8000752 <write_Userdata+0x11e>

	if (addr < 0x0 || addr > 0x1FF)
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800065c:	d301      	bcc.n	8000662 <write_Userdata+0x2e>
		return false;
 800065e:	2300      	movs	r3, #0
 8000660:	e077      	b.n	8000752 <write_Userdata+0x11e>

	for (size_t i = 0, size_arr = 32 - (addr % 32); i < size;)
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	f003 031f 	and.w	r3, r3, #31
 800066c:	f1c3 0320 	rsb	r3, r3, #32
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
 8000672:	e069      	b.n	8000748 <write_Userdata+0x114>
		{
 8000674:	466b      	mov	r3, sp
 8000676:	461e      	mov	r6, r3
			if (size_arr > (size-i))
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000680:	429a      	cmp	r2, r3
 8000682:	d905      	bls.n	8000690 <write_Userdata+0x5c>
				size_arr = (size-i) % 32;
 8000684:	68ba      	ldr	r2, [r7, #8]
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	f003 031f 	and.w	r3, r3, #31
 800068e:	627b      	str	r3, [r7, #36]	; 0x24

			uint8_t part_data[size_arr];
 8000690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000692:	460b      	mov	r3, r1
 8000694:	3b01      	subs	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	2300      	movs	r3, #0
 800069a:	460c      	mov	r4, r1
 800069c:	461d      	mov	r5, r3
 800069e:	f04f 0200 	mov.w	r2, #0
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	00eb      	lsls	r3, r5, #3
 80006a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006ac:	00e2      	lsls	r2, r4, #3
 80006ae:	2300      	movs	r3, #0
 80006b0:	4688      	mov	r8, r1
 80006b2:	4699      	mov	r9, r3
 80006b4:	f04f 0200 	mov.w	r2, #0
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006c8:	1dcb      	adds	r3, r1, #7
 80006ca:	08db      	lsrs	r3, r3, #3
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	ebad 0d03 	sub.w	sp, sp, r3
 80006d2:	466b      	mov	r3, sp
 80006d4:	3300      	adds	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

			for (uint8_t j = 0; j < size_arr; j++)
 80006d8:	2300      	movs	r3, #0
 80006da:	77fb      	strb	r3, [r7, #31]
 80006dc:	e00b      	b.n	80006f6 <write_Userdata+0xc2>
				part_data[j] = data[i+j];
 80006de:	7ffa      	ldrb	r2, [r7, #31]
 80006e0:	6a3b      	ldr	r3, [r7, #32]
 80006e2:	4413      	add	r3, r2
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	441a      	add	r2, r3
 80006e8:	7ffb      	ldrb	r3, [r7, #31]
 80006ea:	7811      	ldrb	r1, [r2, #0]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	54d1      	strb	r1, [r2, r3]
			for (uint8_t j = 0; j < size_arr; j++)
 80006f0:	7ffb      	ldrb	r3, [r7, #31]
 80006f2:	3301      	adds	r3, #1
 80006f4:	77fb      	strb	r3, [r7, #31]
 80006f6:	7ffb      	ldrb	r3, [r7, #31]
 80006f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d8ef      	bhi.n	80006de <write_Userdata+0xaa>

			// запись в память
			write_data_toMem(part_data, size_arr, addr);
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	461a      	mov	r2, r3
 8000702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000704:	6978      	ldr	r0, [r7, #20]
 8000706:	f7ff feff 	bl	8000508 <write_data_toMem>

			addr += size_arr;
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	b29a      	uxth	r2, r3
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	4413      	add	r3, r2
 8000712:	80fb      	strh	r3, [r7, #6]
			i += size_arr;
 8000714:	6a3a      	ldr	r2, [r7, #32]
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	4413      	add	r3, r2
 800071a:	623b      	str	r3, [r7, #32]

			if (size-i >= 32)
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	2b1f      	cmp	r3, #31
 8000724:	d902      	bls.n	800072c <write_Userdata+0xf8>
				size_arr = 32;
 8000726:	2320      	movs	r3, #32
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
 800072a:	e008      	b.n	800073e <write_Userdata+0x10a>
			else
			{
				size_arr = (size-i) % 32;
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	f003 031f 	and.w	r3, r3, #31
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
				if (size_arr == 0)
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <write_Userdata+0x10e>
 800073e:	46b5      	mov	sp, r6
 8000740:	e002      	b.n	8000748 <write_Userdata+0x114>
					break;
 8000742:	bf00      	nop
 8000744:	46b5      	mov	sp, r6
 8000746:	e003      	b.n	8000750 <write_Userdata+0x11c>
	for (size_t i = 0, size_arr = 32 - (addr % 32); i < size;)
 8000748:	6a3a      	ldr	r2, [r7, #32]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	429a      	cmp	r2, r3
 800074e:	d391      	bcc.n	8000674 <write_Userdata+0x40>
			}
		}

	return true;
 8000750:	2301      	movs	r3, #1
}
 8000752:	4618      	mov	r0, r3
 8000754:	372c      	adds	r7, #44	; 0x2c
 8000756:	46bd      	mov	sp, r7
 8000758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800075c <read_mem_data>:
	}
	return memory_true;
}

static void read_mem_data(uint8_t *data, size_t size, uint16_t addr)
{
 800075c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000760:	b08b      	sub	sp, #44	; 0x2c
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	4613      	mov	r3, r2
 800076a:	80fb      	strh	r3, [r7, #6]
 800076c:	466b      	mov	r3, sp
 800076e:	461e      	mov	r6, r3
	uint8_t TA1 = (addr & 0x00FF);
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t TA2 = ((addr & 0xFF00)>>8);
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b29b      	uxth	r3, r3
 800077c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t buf[size+2];
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	1c99      	adds	r1, r3, #2
 8000784:	460b      	mov	r3, r1
 8000786:	3b01      	subs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	2300      	movs	r3, #0
 800078c:	4688      	mov	r8, r1
 800078e:	4699      	mov	r9, r3
 8000790:	f04f 0200 	mov.w	r2, #0
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800079c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007a4:	2300      	movs	r3, #0
 80007a6:	460c      	mov	r4, r1
 80007a8:	461d      	mov	r5, r3
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	00eb      	lsls	r3, r5, #3
 80007b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007b8:	00e2      	lsls	r2, r4, #3
 80007ba:	1dcb      	adds	r3, r1, #7
 80007bc:	08db      	lsrs	r3, r3, #3
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	ebad 0d03 	sub.w	sp, sp, r3
 80007c4:	466b      	mov	r3, sp
 80007c6:	3300      	adds	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]

	buf[0] = TA1;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80007d0:	701a      	strb	r2, [r3, #0]
	buf[1] = TA2;
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80007d8:	705a      	strb	r2, [r3, #1]

	uint8_t dataRom[8];

	ReadRom(&huart1, dataRom);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	480f      	ldr	r0, [pc, #60]	; (8000820 <read_mem_data+0xc4>)
 80007e2:	f7ff fd55 	bl	8000290 <ReadRom>
	ReadMemory(&huart1, buf, size);
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	69b9      	ldr	r1, [r7, #24]
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <read_mem_data+0xc4>)
 80007ec:	f7ff fd36 	bl	800025c <ReadMemory>

	for(size_t i = 0; i < size; i++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
 80007f4:	e00a      	b.n	800080c <read_mem_data+0xb0>
		data[i] = buf[i];
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fa:	4413      	add	r3, r2
 80007fc:	69b9      	ldr	r1, [r7, #24]
 80007fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000800:	440a      	add	r2, r1
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < size; i++)
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	3301      	adds	r3, #1
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
 800080c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	429a      	cmp	r2, r3
 8000812:	d3f0      	bcc.n	80007f6 <read_mem_data+0x9a>
 8000814:	46b5      	mov	sp, r6
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	; 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000820:	20000050 	.word	0x20000050

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <SetBaudrate>:
 */

#include "onewire.h"

static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	uint32_t pclk = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
	huart->Init.BaudRate = baudrate;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	605a      	str	r2, [r3, #4]

	if(huart->Instance == USART1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a2c      	ldr	r2, [pc, #176]	; (80008fc <SetBaudrate+0xcc>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d103      	bne.n	8000856 <SetBaudrate+0x26>
	  {
	    pclk = HAL_RCC_GetPCLK2Freq();
 800084e:	f001 f883 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	e002      	b.n	800085c <SetBaudrate+0x2c>
	  }
	else
	  {
	    pclk = HAL_RCC_GetPCLK1Freq();
 8000856:	f001 f86b 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 800085a:	60f8      	str	r0, [r7, #12]
	  else
	  {
	    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
	  }
	#else
	  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	009a      	lsls	r2, r3, #2
 8000866:	441a      	add	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	4a23      	ldr	r2, [pc, #140]	; (8000900 <SetBaudrate+0xd0>)
 8000874:	fba2 2303 	umull	r2, r3, r2, r3
 8000878:	095b      	lsrs	r3, r3, #5
 800087a:	0119      	lsls	r1, r3, #4
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	009a      	lsls	r2, r3, #2
 8000886:	441a      	add	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <SetBaudrate+0xd0>)
 8000894:	fba3 0302 	umull	r0, r3, r3, r2
 8000898:	095b      	lsrs	r3, r3, #5
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	fb00 f303 	mul.w	r3, r0, r3
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	3332      	adds	r3, #50	; 0x32
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <SetBaudrate+0xd0>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	095b      	lsrs	r3, r3, #5
 80008ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008b2:	4419      	add	r1, r3
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	4613      	mov	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	009a      	lsls	r2, r3, #2
 80008be:	441a      	add	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <SetBaudrate+0xd0>)
 80008cc:	fba3 0302 	umull	r0, r3, r3, r2
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	2064      	movs	r0, #100	; 0x64
 80008d4:	fb00 f303 	mul.w	r3, r0, r3
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	3332      	adds	r3, #50	; 0x32
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <SetBaudrate+0xd0>)
 80008e0:	fba2 2303 	umull	r2, r3, r2, r3
 80008e4:	095b      	lsrs	r3, r3, #5
 80008e6:	f003 020f 	and.w	r2, r3, #15
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	440a      	add	r2, r1
 80008f0:	609a      	str	r2, [r3, #8]
	#endif
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40013800 	.word	0x40013800
 8000900:	51eb851f 	.word	0x51eb851f

08000904 <OneWire_Reset>:

ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	ONEWIRE_Status status = ONEWIRE_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
	uint8_t txByte = ONEWIRE_RESET_BYTE;
 8000910:	23f0      	movs	r3, #240	; 0xf0
 8000912:	73bb      	strb	r3, [r7, #14]
	uint8_t rxByte = 0x00;
 8000914:	2300      	movs	r3, #0
 8000916:	737b      	strb	r3, [r7, #13]

	SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8000918:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff87 	bl	8000830 <SetBaudrate>

	HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 8000922:	f107 010e 	add.w	r1, r7, #14
 8000926:	230a      	movs	r3, #10
 8000928:	2201      	movs	r2, #1
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f001 f8e8 	bl	8001b00 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 8000930:	f107 010d 	add.w	r1, r7, #13
 8000934:	230a      	movs	r3, #10
 8000936:	2201      	movs	r2, #1
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f001 f973 	bl	8001c24 <HAL_UART_Receive>

	SetBaudrate(huart, ONEWIRE_BAUDRATE);
 800093e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff74 	bl	8000830 <SetBaudrate>

	if (rxByte == txByte)
 8000948:	7b7a      	ldrb	r2, [r7, #13]
 800094a:	7bbb      	ldrb	r3, [r7, #14]
 800094c:	429a      	cmp	r2, r3
 800094e:	d101      	bne.n	8000954 <OneWire_Reset+0x50>
	{
		status = ONEWIRE_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <OneWire_ProcessBit>:

uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	70fb      	strb	r3, [r7, #3]
	uint8_t txData = 0xFF;
 800096a:	23ff      	movs	r3, #255	; 0xff
 800096c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxData = 0x00;
 800096e:	2300      	movs	r3, #0
 8000970:	73bb      	strb	r3, [r7, #14]

	if (bit == 0)
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <OneWire_ProcessBit+0x1e>
	{
		txData = 0x00;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
	}

	HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 800097c:	f107 010f 	add.w	r1, r7, #15
 8000980:	230a      	movs	r3, #10
 8000982:	2201      	movs	r2, #1
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f001 f8bb 	bl	8001b00 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 800098a:	f107 010e 	add.w	r1, r7, #14
 800098e:	230a      	movs	r3, #10
 8000990:	2201      	movs	r2, #1
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f001 f946 	bl	8001c24 <HAL_UART_Receive>

	return rxData;
 8000998:	7bbb      	ldrb	r3, [r7, #14]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <OneWire_ProcessByte>:

uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	70fb      	strb	r3, [r7, #3]
	uint8_t rxByte = 0x00;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73bb      	strb	r3, [r7, #14]
 80009b6:	e022      	b.n	80009fe <OneWire_ProcessByte+0x5c>
	{
		uint8_t txBit = (byte >> i) & 0x01;
 80009b8:	78fa      	ldrb	r2, [r7, #3]
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	fa42 f303 	asr.w	r3, r2, r3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	733b      	strb	r3, [r7, #12]
		uint8_t rxBit = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	737b      	strb	r3, [r7, #13]

		uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 80009cc:	7b3b      	ldrb	r3, [r7, #12]
 80009ce:	4619      	mov	r1, r3
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ffc4 	bl	800095e <OneWire_ProcessBit>
 80009d6:	4603      	mov	r3, r0
 80009d8:	72fb      	strb	r3, [r7, #11]

		if (tempRxData == 0xFF)
 80009da:	7afb      	ldrb	r3, [r7, #11]
 80009dc:	2bff      	cmp	r3, #255	; 0xff
 80009de:	d101      	bne.n	80009e4 <OneWire_ProcessByte+0x42>
			rxBit = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	737b      	strb	r3, [r7, #13]

		rxByte |= (rxBit << i);
 80009e4:	7b7a      	ldrb	r2, [r7, #13]
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	3301      	adds	r3, #1
 80009fc:	73bb      	strb	r3, [r7, #14]
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	2b07      	cmp	r3, #7
 8000a02:	d9d9      	bls.n	80009b8 <OneWire_ProcessByte+0x16>
	}

	return rxByte;
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_MspInit+0x60>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_MspInit+0x60>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010000 	.word	0x40010000

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <HAL_UART_MspInit+0xc8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d125      	bne.n	8000ae0 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aca:	2312      	movs	r3, #18
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481a      	ldr	r0, [pc, #104]	; (8000b44 <HAL_UART_MspInit+0xd0>)
 8000ada:	f000 f9d1 	bl	8000e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ade:	e028      	b.n	8000b32 <HAL_UART_MspInit+0xbe>
  else if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <HAL_UART_MspInit+0xd4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d123      	bne.n	8000b32 <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_UART_MspInit+0xcc>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2302      	movs	r3, #2
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_UART_MspInit+0xd0>)
 8000b2e:	f000 f9a7 	bl	8000e80 <HAL_GPIO_Init>
}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40004400 	.word	0x40004400

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b92:	f000 f875 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
	...

08000ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bce:	f7ff ffe4 	bl	8000b9a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f001 f9a1 	bl	8001f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd6:	f7ff fb6d 	bl	80002b4 <main>
  bx lr
 8000bda:	4770      	bx	lr
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000be4:	08002000 	.word	0x08002000
  ldr r2, =_sbss
 8000be8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000bec:	200000dc 	.word	0x200000dc

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x28>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x28>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f907 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f808 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fefe 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f911 	bl	8000e66 <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f8e7 	bl	8000e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000028 	.word	0x20000028
 8000c78:	20000030 	.word	0x20000030
 8000c7c:	2000002c 	.word	0x2000002c

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a03      	ldr	r2, [pc, #12]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	20000030 	.word	0x20000030
 8000ca0:	200000d8 	.word	0x200000d8

08000ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <HAL_GetTick+0x10>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	200000d8 	.word	0x200000d8

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	; (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f7ff ff90 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff49 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff5e 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff90 	bl	8000d70 <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5f 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffb0 	bl	8000dd4 <SysTick_Config>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b08b      	sub	sp, #44	; 0x2c
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	e169      	b.n	8001168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e94:	2201      	movs	r2, #1
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8158 	bne.w	8001162 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4a9a      	ldr	r2, [pc, #616]	; (8001120 <HAL_GPIO_Init+0x2a0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d05e      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ebc:	4a98      	ldr	r2, [pc, #608]	; (8001120 <HAL_GPIO_Init+0x2a0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d875      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ec2:	4a98      	ldr	r2, [pc, #608]	; (8001124 <HAL_GPIO_Init+0x2a4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d058      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ec8:	4a96      	ldr	r2, [pc, #600]	; (8001124 <HAL_GPIO_Init+0x2a4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d86f      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ece:	4a96      	ldr	r2, [pc, #600]	; (8001128 <HAL_GPIO_Init+0x2a8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d052      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ed4:	4a94      	ldr	r2, [pc, #592]	; (8001128 <HAL_GPIO_Init+0x2a8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d869      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000eda:	4a94      	ldr	r2, [pc, #592]	; (800112c <HAL_GPIO_Init+0x2ac>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d04c      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ee0:	4a92      	ldr	r2, [pc, #584]	; (800112c <HAL_GPIO_Init+0x2ac>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d863      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ee6:	4a92      	ldr	r2, [pc, #584]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d046      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000eec:	4a90      	ldr	r2, [pc, #576]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d85d      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ef2:	2b12      	cmp	r3, #18
 8000ef4:	d82a      	bhi.n	8000f4c <HAL_GPIO_Init+0xcc>
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d859      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000efa:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <HAL_GPIO_Init+0x80>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f7b 	.word	0x08000f7b
 8000f04:	08000f55 	.word	0x08000f55
 8000f08:	08000f67 	.word	0x08000f67
 8000f0c:	08000fa9 	.word	0x08000fa9
 8000f10:	08000faf 	.word	0x08000faf
 8000f14:	08000faf 	.word	0x08000faf
 8000f18:	08000faf 	.word	0x08000faf
 8000f1c:	08000faf 	.word	0x08000faf
 8000f20:	08000faf 	.word	0x08000faf
 8000f24:	08000faf 	.word	0x08000faf
 8000f28:	08000faf 	.word	0x08000faf
 8000f2c:	08000faf 	.word	0x08000faf
 8000f30:	08000faf 	.word	0x08000faf
 8000f34:	08000faf 	.word	0x08000faf
 8000f38:	08000faf 	.word	0x08000faf
 8000f3c:	08000faf 	.word	0x08000faf
 8000f40:	08000faf 	.word	0x08000faf
 8000f44:	08000f5d 	.word	0x08000f5d
 8000f48:	08000f71 	.word	0x08000f71
 8000f4c:	4a79      	ldr	r2, [pc, #484]	; (8001134 <HAL_GPIO_Init+0x2b4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f52:	e02c      	b.n	8000fae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e029      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	3304      	adds	r3, #4
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e024      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	623b      	str	r3, [r7, #32]
          break;
 8000f6e:	e01f      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	330c      	adds	r3, #12
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e01a      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f82:	2304      	movs	r3, #4
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e013      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f90:	2308      	movs	r3, #8
 8000f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	611a      	str	r2, [r3, #16]
          break;
 8000f9a:	e009      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	615a      	str	r2, [r3, #20]
          break;
 8000fa6:	e003      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
          break;
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          break;
 8000fae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	d801      	bhi.n	8000fba <HAL_GPIO_Init+0x13a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	e001      	b.n	8000fbe <HAL_GPIO_Init+0x13e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2bff      	cmp	r3, #255	; 0xff
 8000fc4:	d802      	bhi.n	8000fcc <HAL_GPIO_Init+0x14c>
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x152>
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	3b08      	subs	r3, #8
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	210f      	movs	r1, #15
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	6a39      	ldr	r1, [r7, #32]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	431a      	orrs	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80b1 	beq.w	8001162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001000:	4b4d      	ldr	r3, [pc, #308]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001018:	4a48      	ldr	r2, [pc, #288]	; (800113c <HAL_GPIO_Init+0x2bc>)
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a40      	ldr	r2, [pc, #256]	; (8001140 <HAL_GPIO_Init+0x2c0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d013      	beq.n	800106c <HAL_GPIO_Init+0x1ec>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a3f      	ldr	r2, [pc, #252]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d00d      	beq.n	8001068 <HAL_GPIO_Init+0x1e8>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a3e      	ldr	r2, [pc, #248]	; (8001148 <HAL_GPIO_Init+0x2c8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0x1e4>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a3d      	ldr	r2, [pc, #244]	; (800114c <HAL_GPIO_Init+0x2cc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d101      	bne.n	8001060 <HAL_GPIO_Init+0x1e0>
 800105c:	2303      	movs	r3, #3
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 8001060:	2304      	movs	r3, #4
 8001062:	e004      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 8001064:	2302      	movs	r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 800106c:	2300      	movs	r3, #0
 800106e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001070:	f002 0203 	and.w	r2, r2, #3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4093      	lsls	r3, r2
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800107e:	492f      	ldr	r1, [pc, #188]	; (800113c <HAL_GPIO_Init+0x2bc>)
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	492c      	ldr	r1, [pc, #176]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010a6:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4928      	ldr	r1, [pc, #160]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4922      	ldr	r1, [pc, #136]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	491e      	ldr	r1, [pc, #120]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 80010d8:	4013      	ands	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	4918      	ldr	r1, [pc, #96]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	608b      	str	r3, [r1, #8]
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	4914      	ldr	r1, [pc, #80]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 8001100:	4013      	ands	r3, r2
 8001102:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d021      	beq.n	8001154 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	490e      	ldr	r1, [pc, #56]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	60cb      	str	r3, [r1, #12]
 800111c:	e021      	b.n	8001162 <HAL_GPIO_Init+0x2e2>
 800111e:	bf00      	nop
 8001120:	10320000 	.word	0x10320000
 8001124:	10310000 	.word	0x10310000
 8001128:	10220000 	.word	0x10220000
 800112c:	10210000 	.word	0x10210000
 8001130:	10120000 	.word	0x10120000
 8001134:	10110000 	.word	0x10110000
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	40010800 	.word	0x40010800
 8001144:	40010c00 	.word	0x40010c00
 8001148:	40011000 	.word	0x40011000
 800114c:	40011400 	.word	0x40011400
 8001150:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_GPIO_Init+0x304>)
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	43db      	mvns	r3, r3
 800115c:	4909      	ldr	r1, [pc, #36]	; (8001184 <HAL_GPIO_Init+0x304>)
 800115e:	4013      	ands	r3, r2
 8001160:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	3301      	adds	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	fa22 f303 	lsr.w	r3, r2, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	f47f ae8e 	bne.w	8000e94 <HAL_GPIO_Init+0x14>
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	372c      	adds	r7, #44	; 0x2c
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e272      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8087 	beq.w	80012b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a8:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d00c      	beq.n	80011ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011b4:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d112      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5e>
 80011c0:	4b8c      	ldr	r3, [pc, #560]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011cc:	d10b      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ce:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d06c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x12c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d168      	bne.n	80012b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e24c      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x76>
 80011f0:	4b80      	ldr	r3, [pc, #512]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a7f      	ldr	r2, [pc, #508]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e02e      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x98>
 8001206:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a7a      	ldr	r2, [pc, #488]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a77      	ldr	r2, [pc, #476]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e01d      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0xbc>
 800122a:	4b72      	ldr	r3, [pc, #456]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a71      	ldr	r2, [pc, #452]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6e      	ldr	r2, [pc, #440]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e00b      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 8001244:	4b6b      	ldr	r3, [pc, #428]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a6a      	ldr	r2, [pc, #424]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800124a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b68      	ldr	r3, [pc, #416]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a67      	ldr	r2, [pc, #412]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fd1e 	bl	8000ca4 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fd1a 	bl	8000ca4 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e200      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0xe4>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fd0a 	bl	8000ca4 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fd06 	bl	8000ca4 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e1ec      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x10c>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d063      	beq.n	800138a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c2:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ce:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d11c      	bne.n	8001314 <HAL_RCC_OscConfig+0x18c>
 80012da:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d116      	bne.n	8001314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x176>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e1c0      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4939      	ldr	r1, [pc, #228]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	e03a      	b.n	800138a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131c:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <HAL_RCC_OscConfig+0x270>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fcbf 	bl	8000ca4 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fcbb 	bl	8000ca4 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1a1      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4927      	ldr	r1, [pc, #156]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <HAL_RCC_OscConfig+0x270>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fc9e 	bl	8000ca4 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136c:	f7ff fc9a 	bl	8000ca4 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e180      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d03a      	beq.n	800140c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d019      	beq.n	80013d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_RCC_OscConfig+0x274>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a4:	f7ff fc7e 	bl	8000ca4 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ac:	f7ff fc7a 	bl	8000ca4 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e160      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f000 fad8 	bl	8001980 <RCC_Delay>
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_RCC_OscConfig+0x274>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fc64 	bl	8000ca4 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013de:	e00f      	b.n	8001400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fc60 	bl	8000ca4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d908      	bls.n	8001400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e146      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	42420000 	.word	0x42420000
 80013fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	4b92      	ldr	r3, [pc, #584]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1e9      	bne.n	80013e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80a6 	beq.w	8001566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141e:	4b8b      	ldr	r3, [pc, #556]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10d      	bne.n	8001446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b88      	ldr	r3, [pc, #544]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a87      	ldr	r2, [pc, #540]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b85      	ldr	r3, [pc, #532]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001442:	2301      	movs	r3, #1
 8001444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b82      	ldr	r3, [pc, #520]	; (8001650 <HAL_RCC_OscConfig+0x4c8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001452:	4b7f      	ldr	r3, [pc, #508]	; (8001650 <HAL_RCC_OscConfig+0x4c8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a7e      	ldr	r2, [pc, #504]	; (8001650 <HAL_RCC_OscConfig+0x4c8>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff fc21 	bl	8000ca4 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001466:	f7ff fc1d 	bl	8000ca4 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b64      	cmp	r3, #100	; 0x64
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e103      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b75      	ldr	r3, [pc, #468]	; (8001650 <HAL_RCC_OscConfig+0x4c8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x312>
 800148c:	4b6f      	ldr	r3, [pc, #444]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4a6e      	ldr	r2, [pc, #440]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6213      	str	r3, [r2, #32]
 8001498:	e02d      	b.n	80014f6 <HAL_RCC_OscConfig+0x36e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x334>
 80014a2:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a69      	ldr	r2, [pc, #420]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a66      	ldr	r2, [pc, #408]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	e01c      	b.n	80014f6 <HAL_RCC_OscConfig+0x36e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d10c      	bne.n	80014de <HAL_RCC_OscConfig+0x356>
 80014c4:	4b61      	ldr	r3, [pc, #388]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a60      	ldr	r2, [pc, #384]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	4b5e      	ldr	r3, [pc, #376]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a5d      	ldr	r2, [pc, #372]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	e00b      	b.n	80014f6 <HAL_RCC_OscConfig+0x36e>
 80014de:	4b5b      	ldr	r3, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4a5a      	ldr	r2, [pc, #360]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6213      	str	r3, [r2, #32]
 80014ea:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a57      	ldr	r2, [pc, #348]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	f023 0304 	bic.w	r3, r3, #4
 80014f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d015      	beq.n	800152a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fbd1 	bl	8000ca4 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fbcd 	bl	8000ca4 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e0b1      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151c:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ee      	beq.n	8001506 <HAL_RCC_OscConfig+0x37e>
 8001528:	e014      	b.n	8001554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fbbb 	bl	8000ca4 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff fbb7 	bl	8000ca4 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e09b      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	4b40      	ldr	r3, [pc, #256]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1ee      	bne.n	8001532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d105      	bne.n	8001566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a3b      	ldr	r2, [pc, #236]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8087 	beq.w	800167e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b08      	cmp	r3, #8
 800157a:	d061      	beq.n	8001640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d146      	bne.n	8001612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001584:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x4cc>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fb8b 	bl	8000ca4 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fb87 	bl	8000ca4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e06d      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b8:	d108      	bne.n	80015cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	4921      	ldr	r1, [pc, #132]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a19      	ldr	r1, [r3, #32]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	430b      	orrs	r3, r1
 80015de:	491b      	ldr	r1, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x4cc>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fb5b 	bl	8000ca4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fb57 	bl	8000ca4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e03d      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x46a>
 8001610:	e035      	b.n	800167e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_OscConfig+0x4cc>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb44 	bl	8000ca4 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fb40 	bl	8000ca4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e026      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x498>
 800163e:	e01e      	b.n	800167e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e019      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
 800164c:	40021000 	.word	0x40021000
 8001650:	40007000 	.word	0x40007000
 8001654:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCC_OscConfig+0x500>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	429a      	cmp	r2, r3
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0d0      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d910      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 0207 	bic.w	r2, r3, #7
 80016b6:	4965      	ldr	r1, [pc, #404]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b63      	ldr	r3, [pc, #396]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0b8      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d020      	beq.n	800171e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a58      	ldr	r2, [pc, #352]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001700:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800170a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170c:	4b50      	ldr	r3, [pc, #320]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	494d      	ldr	r1, [pc, #308]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d040      	beq.n	80017ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d115      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e07f      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e073      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06b      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176a:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f023 0203 	bic.w	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4936      	ldr	r1, [pc, #216]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800177c:	f7ff fa92 	bl	8000ca4 <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	e00a      	b.n	800179a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001784:	f7ff fa8e 	bl	8000ca4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e053      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 020c 	and.w	r2, r3, #12
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d1eb      	bne.n	8001784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d210      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0207 	bic.w	r2, r3, #7
 80017c2:	4922      	ldr	r1, [pc, #136]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e032      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4916      	ldr	r1, [pc, #88]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800181a:	f000 f821 	bl	8001860 <HAL_RCC_GetSysClockFreq>
 800181e:	4602      	mov	r2, r0
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	490a      	ldr	r1, [pc, #40]	; (8001854 <HAL_RCC_ClockConfig+0x1c8>)
 800182c:	5ccb      	ldrb	r3, [r1, r3]
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_RCC_ClockConfig+0x1cc>)
 8001834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_ClockConfig+0x1d0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f9f0 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000
 8001850:	40021000 	.word	0x40021000
 8001854:	08001fe0 	.word	0x08001fe0
 8001858:	20000028 	.word	0x20000028
 800185c:	2000002c 	.word	0x2000002c

08001860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001860:	b490      	push	{r4, r7}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <HAL_RCC_GetSysClockFreq+0xac>)
 8001868:	1d3c      	adds	r4, r7, #4
 800186a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001870:	f240 2301 	movw	r3, #513	; 0x201
 8001874:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_RCC_GetSysClockFreq+0xb0>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b04      	cmp	r3, #4
 8001898:	d002      	beq.n	80018a0 <HAL_RCC_GetSysClockFreq+0x40>
 800189a:	2b08      	cmp	r3, #8
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_GetSysClockFreq+0x46>
 800189e:	e02b      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018a2:	623b      	str	r3, [r7, #32]
      break;
 80018a4:	e02b      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	0c9b      	lsrs	r3, r3, #18
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3328      	adds	r3, #40	; 0x28
 80018b0:	443b      	add	r3, r7
 80018b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d012      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	0c5b      	lsrs	r3, r3, #17
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	3328      	adds	r3, #40	; 0x28
 80018ce:	443b      	add	r3, r7
 80018d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018da:	fb03 f202 	mul.w	r2, r3, r2
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	e004      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	623b      	str	r3, [r7, #32]
      break;
 80018f6:	e002      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018fa:	623b      	str	r3, [r7, #32]
      break;
 80018fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bc90      	pop	{r4, r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	08001fd0 	.word	0x08001fd0
 8001910:	40021000 	.word	0x40021000
 8001914:	007a1200 	.word	0x007a1200
 8001918:	003d0900 	.word	0x003d0900

0800191c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001920:	4b02      	ldr	r3, [pc, #8]	; (800192c <HAL_RCC_GetHCLKFreq+0x10>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000028 	.word	0x20000028

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001934:	f7ff fff2 	bl	800191c <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	08001ff0 	.word	0x08001ff0

08001958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800195c:	f7ff ffde 	bl	800191c <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	0adb      	lsrs	r3, r3, #11
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	; (800197c <HAL_RCC_GetPCLK2Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	08001ff0 	.word	0x08001ff0

08001980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <RCC_Delay+0x34>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <RCC_Delay+0x38>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0a5b      	lsrs	r3, r3, #9
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800199c:	bf00      	nop
  }
  while (Delay --);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	60fa      	str	r2, [r7, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f9      	bne.n	800199c <RCC_Delay+0x1c>
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	20000028 	.word	0x20000028
 80019b8:	10624dd3 	.word	0x10624dd3

080019bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e03f      	b.n	8001a4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff f846 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2224      	movs	r2, #36	; 0x24
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f9fb 	bl	8001dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e047      	b.n	8001af8 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d106      	bne.n	8001a82 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7fe fff9 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2224      	movs	r2, #36	; 0x24
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a98:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f9ae 	bl	8001dfc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001abe:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0208 	orr.w	r2, r2, #8
 8001ace:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ade:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d17c      	bne.n	8001c1a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_UART_Transmit+0x2c>
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e075      	b.n	8001c1c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_UART_Transmit+0x3e>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e06e      	b.n	8001c1c <HAL_UART_Transmit+0x11c>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2221      	movs	r2, #33	; 0x21
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f8a6 	bl	8000ca4 <HAL_GetTick>
 8001b58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	88fa      	ldrh	r2, [r7, #6]
 8001b5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	88fa      	ldrh	r2, [r7, #6]
 8001b64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6e:	d108      	bne.n	8001b82 <HAL_UART_Transmit+0x82>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d104      	bne.n	8001b82 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	e003      	b.n	8001b8a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b92:	e02a      	b.n	8001bea <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f8e2 	bl	8001d68 <UART_WaitOnFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e036      	b.n	8001c1c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10b      	bne.n	8001bcc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bc2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	e007      	b.n	8001bdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1cf      	bne.n	8001b94 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2140      	movs	r1, #64	; 0x40
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f8b2 	bl	8001d68 <UART_WaitOnFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e006      	b.n	8001c1c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c1a:	2302      	movs	r3, #2
  }
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	f040 808c 	bne.w	8001d5e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_UART_Receive+0x2e>
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e084      	b.n	8001d60 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_UART_Receive+0x40>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e07d      	b.n	8001d60 <HAL_UART_Receive+0x13c>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2222      	movs	r2, #34	; 0x22
 8001c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c80:	f7ff f810 	bl	8000ca4 <HAL_GetTick>
 8001c84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9a:	d108      	bne.n	8001cae <HAL_UART_Receive+0x8a>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d104      	bne.n	8001cae <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	e003      	b.n	8001cb6 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001cbe:	e043      	b.n	8001d48 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2120      	movs	r1, #32
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f84c 	bl	8001d68 <UART_WaitOnFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e042      	b.n	8001d60 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10c      	bne.n	8001cfa <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	e01f      	b.n	8001d3a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d02:	d007      	beq.n	8001d14 <HAL_UART_Receive+0xf0>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10a      	bne.n	8001d22 <HAL_UART_Receive+0xfe>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e008      	b.n	8001d34 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1b6      	bne.n	8001cc0 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d78:	e02c      	b.n	8001dd4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d028      	beq.n	8001dd4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d88:	f7fe ff8c 	bl	8000ca4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d21d      	bcs.n	8001dd4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001da6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e00f      	b.n	8001df4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d0c3      	beq.n	8001d7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e36:	f023 030c 	bic.w	r3, r3, #12
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <UART_SetConfig+0x114>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d103      	bne.n	8001e6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e64:	f7ff fd78 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	e002      	b.n	8001e72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e6c:	f7ff fd60 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 8001e70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	009a      	lsls	r2, r3, #2
 8001e7c:	441a      	add	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <UART_SetConfig+0x118>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	0119      	lsls	r1, r3, #4
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	009a      	lsls	r2, r3, #2
 8001e9c:	441a      	add	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <UART_SetConfig+0x118>)
 8001eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2064      	movs	r0, #100	; 0x64
 8001eb2:	fb00 f303 	mul.w	r3, r0, r3
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	3332      	adds	r3, #50	; 0x32
 8001ebc:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <UART_SetConfig+0x118>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec8:	4419      	add	r1, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009a      	lsls	r2, r3, #2
 8001ed4:	441a      	add	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <UART_SetConfig+0x118>)
 8001ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2064      	movs	r0, #100	; 0x64
 8001eea:	fb00 f303 	mul.w	r3, r0, r3
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	3332      	adds	r3, #50	; 0x32
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <UART_SetConfig+0x118>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	f003 020f 	and.w	r2, r3, #15
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	440a      	add	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40013800 	.word	0x40013800
 8001f14:	51eb851f 	.word	0x51eb851f

08001f18 <__libc_init_array>:
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	2600      	movs	r6, #0
 8001f1c:	4d0c      	ldr	r5, [pc, #48]	; (8001f50 <__libc_init_array+0x38>)
 8001f1e:	4c0d      	ldr	r4, [pc, #52]	; (8001f54 <__libc_init_array+0x3c>)
 8001f20:	1b64      	subs	r4, r4, r5
 8001f22:	10a4      	asrs	r4, r4, #2
 8001f24:	42a6      	cmp	r6, r4
 8001f26:	d109      	bne.n	8001f3c <__libc_init_array+0x24>
 8001f28:	f000 f822 	bl	8001f70 <_init>
 8001f2c:	2600      	movs	r6, #0
 8001f2e:	4d0a      	ldr	r5, [pc, #40]	; (8001f58 <__libc_init_array+0x40>)
 8001f30:	4c0a      	ldr	r4, [pc, #40]	; (8001f5c <__libc_init_array+0x44>)
 8001f32:	1b64      	subs	r4, r4, r5
 8001f34:	10a4      	asrs	r4, r4, #2
 8001f36:	42a6      	cmp	r6, r4
 8001f38:	d105      	bne.n	8001f46 <__libc_init_array+0x2e>
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f40:	4798      	blx	r3
 8001f42:	3601      	adds	r6, #1
 8001f44:	e7ee      	b.n	8001f24 <__libc_init_array+0xc>
 8001f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f4a:	4798      	blx	r3
 8001f4c:	3601      	adds	r6, #1
 8001f4e:	e7f2      	b.n	8001f36 <__libc_init_array+0x1e>
 8001f50:	08001ff8 	.word	0x08001ff8
 8001f54:	08001ff8 	.word	0x08001ff8
 8001f58:	08001ff8 	.word	0x08001ff8
 8001f5c:	08001ffc 	.word	0x08001ffc

08001f60 <memset>:
 8001f60:	4603      	mov	r3, r0
 8001f62:	4402      	add	r2, r0
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d100      	bne.n	8001f6a <memset+0xa>
 8001f68:	4770      	bx	lr
 8001f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f6e:	e7f9      	b.n	8001f64 <memset+0x4>

08001f70 <_init>:
 8001f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f72:	bf00      	nop
 8001f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f76:	bc08      	pop	{r3}
 8001f78:	469e      	mov	lr, r3
 8001f7a:	4770      	bx	lr

08001f7c <_fini>:
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	bf00      	nop
 8001f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f82:	bc08      	pop	{r3}
 8001f84:	469e      	mov	lr, r3
 8001f86:	4770      	bx	lr
